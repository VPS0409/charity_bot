# database.py

import pymysql
import logging
import numpy as np
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self, host, user, password, db_name):
        self.host = host
        self.user = user
        self.password = password
        self.db_name = db_name
        self.connection = None
    
    def connect(self):
        try:
            self.connection = pymysql.connect(
                host=self.host,
                user=self.user,
                password=self.password,
                database=self.db_name,
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except pymysql.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
            return False
    
    def disconnect(self):
        if self.connection:
            self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    def get_or_create_group(self, group_name, description=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = "SELECT id FROM questions_groups WHERE name = %s"
                cursor.execute(query, (group_name,))
                result = cursor.fetchone()
                
                if result:
                    return result['id']
                else:
                    insert_query = "INSERT INTO questions_groups (name, description) VALUES (%s, %s)"
                    cursor.execute(insert_query, (group_name, description))
                    self.connection.commit()
                    return cursor.lastrowid
        except pymysql.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_or_create_group: {str(e)}")
            return None
    
    def insert_answer(self, answer_text):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = "INSERT INTO answers (answer_text) VALUES (%s)"
                cursor.execute(query, (answer_text,))
                self.connection.commit()
                return cursor.lastrowid
        except pymysql.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return None
    
    def insert_standard_question(self, title, group_id, answer_id, intent=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = """
                INSERT INTO standard_questions (title, group_id, answer_id, intent)
                VALUES (%s, %s, %s, %s)
                """
                cursor.execute(query, (title, group_id, answer_id, intent))
                self.connection.commit()
                return cursor.lastrowid
        except pymysql.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def insert_question_variant(self, variant_text, embedding, std_question_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞"""
        if not self.connection:
            return False
            
        try:
            with self.connection.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                check_query = """
                SELECT id FROM question_variants 
                WHERE variant_text = %s AND standard_question_id = %s
                """
                cursor.execute(check_query, (variant_text, std_question_id))
                if cursor.fetchone():
                    return False  # –î—É–±–ª–∏–∫–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                insert_query = """
                INSERT INTO question_variants 
                (variant_text, embedding, standard_question_id)
                VALUES (%s, %s, %s)
                """
                cursor.execute(insert_query, (variant_text, embedding, std_question_id))
                self.connection.commit()
                return True
        except pymysql.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            return False
    
    def find_closest_question(self, embedding):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥—É"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
                cursor.execute("""
                    SELECT qv.id, qv.embedding, qv.variant_text, 
                        sq.id AS std_question_id, sq.answer_id, sq.intent
                    FROM question_variants qv
                    JOIN standard_questions sq ON qv.standard_question_id = sq.id
                """)
                all_variants = cursor.fetchall()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if not all_variants:
                    return None
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BLOB –≤ –º–∞—Å—Å–∏–≤—ã numpy —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
                variant_embeddings = []
                valid_variants = []
                expected_size = 384 * 4  # 384 –∑–Ω–∞—á–µ–Ω–∏—è * 4 –±–∞–π—Ç–∞ (float32)
                
                for variant in all_variants:
                    blob_data = variant['embedding']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                    if len(blob_data) != expected_size:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(blob_data)} –±–∞–π—Ç (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_size})")
                        continue
                    
                    try:
                        array = np.frombuffer(blob_data, dtype=np.float32)
                        if array.shape[0] == 384:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
                            variant_embeddings.append(array)
                            valid_variants.append(variant)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BLOB: {str(e)}")
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if not variant_embeddings:
                    return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å
                from sklearn.metrics.pairwise import cosine_similarity
                similarities = cosine_similarity([embedding], variant_embeddings)[0]
                
                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å
                max_index = np.argmax(similarities)
                max_similarity = similarities[max_index]
                best_variant = valid_variants[max_index]
                
                return {
                    'variant_id': best_variant['id'],
                    'std_question_id': best_variant['std_question_id'],
                    'answer_id': best_variant['answer_id'],
                    'intent': best_variant['intent'],
                    'similarity': float(max_similarity),
                    'variant_text': best_variant['variant_text']
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
        
    def get_answer_text(self, answer_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ ID"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = "SELECT answer_text FROM answers WHERE id = %s"
                cursor.execute(query, (answer_id,))
                result = cursor.fetchone()
                return result['answer_text'] if result else None
        except pymysql.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return None
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def log_user_question(self, session_id, client_id, raw_question, 
                         normalized_text, embedding, standard_question_id=None,
                         answer_id=None, is_found=False, confidence=None,
                         response_time_ms=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = """
                INSERT INTO user_questions (
                    session_id, client_id, raw_question, normalized_text, embedding,
                    standard_question_id, answer_id, is_found, confidence, response_time_ms
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                cursor.execute(query, (
                    session_id, client_id or None, raw_question, normalized_text, embedding,
                    standard_question_id, answer_id, is_found, confidence, response_time_ms
                ))
                self.connection.commit()
                return cursor.lastrowid
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
            return None
    
    def log_pending_question(self, user_question_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"""
        if not self.connection:
            return None
            
        try:
            with self.connection.cursor() as cursor:
                query = "INSERT INTO pending_questions (user_question_id) VALUES (%s)"
                cursor.execute(query, (user_question_id,))
                self.connection.commit()
                return cursor.lastrowid
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ pending_questions: {str(e)}")
            return None