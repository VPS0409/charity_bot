# view_pending.py
# view_pending.py

import logging
import argparse
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import Database
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def view_pending_questions(show_all=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Database (–∫–∞–∫ –≤ add_question.py)
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    
    if not db.connect():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        condition = "" if show_all else "WHERE processed = FALSE"
        
        query = f"""
        SELECT 
            pq.id AS pending_id,
            uq.raw_question,
            uq.created_at,
            pq.processed,
            sq.title AS matched_question
        FROM pending_questions pq
        JOIN user_questions uq ON pq.user_question_id = uq.id
        LEFT JOIN standard_questions sq ON uq.standard_question_id = sq.id
        {condition}
        ORDER BY uq.created_at DESC
        """
        
        with db.connection.cursor() as cursor:
            cursor.execute(query)
            questions = cursor.fetchall()
            
            if not questions:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                return
                
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤:")
            print("\n" + "=" * 100)
            print(f"{'ID':<8} | {'–°—Ç–∞—Ç—É—Å':<12} | {'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è':<20} | {'–í–æ–ø—Ä–æ—Å'}")
            print("-" * 100)
            
            for row in questions:
                status = "–û–±—Ä–∞–±–æ—Ç–∞–Ω" if row['processed'] else "–û–∂–∏–¥–∞–µ—Ç"
                date_str = row['created_at'].strftime("%Y-%m-%d %H:%M")
                matched = f" [–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {row['matched_question']}]" if row['matched_question'] else ""
                
                print(f"{row['pending_id']:<8} | {status:<12} | {date_str:<20} | {row['raw_question']}{matched}")
            
            print("=" * 100)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤')
    parser.add_argument('--all', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ')
    args = parser.parse_args()
    
    view_pending_questions(args.all)