# scripts/load_data.py
import sys
import os
import argparse
import csv
import logging
import traceback
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import config
from database import Database
from embedding_model import EmbeddingModel
from utils import array_to_blob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def normalize_field(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π"""
    if value is None:
        return ""
    return str(value).strip().replace('\xa0', ' ').replace('"', '').replace("'", "")

def is_header_row(row):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    header_keywords = [
        'questions_groups', 'standard_questions', 
        'intent', 'question_variants', 'answers'
    ]
    contains_keywords = any(
        any(keyword in str(field).lower() for keyword in header_keywords)
        for field in row
    )
    return contains_keywords

def load_data(csv_file, has_header=False):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    embedder = EmbeddingModel(config.MODEL_PATH)
    
    # –ö—ç—à–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    groups_cache = {}
    std_questions_cache = {}
    answers_cache = {}
    variants_cache = {}  # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    row_count = 0
    inserted_groups = 0
    inserted_std_questions = 0
    inserted_answers = 0
    inserted_variants = 0
    skipped_count = 0
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.reader(file, delimiter=',', quotechar='"')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            first_row = next(reader, None)
            if first_row is None:
                logger.error("‚ùå –§–∞–π–ª CSV –ø—É—Å—Ç")
                return False
                
            auto_detected_header = is_header_row(first_row)
            
            if has_header or auto_detected_header:
                actual_header = first_row
                logger.info(f"üîñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {actual_header}")
            else:
                file.seek(0)
                logger.info("‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏")
            
            for row in reader:
                row_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–µ–π
                if len(row) < 5:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç—Å—è 5 –ø–æ–ª–µ–π) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_count += 1
                    continue
                    
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π
                group_name = normalize_field(row[0])
                std_question = normalize_field(row[1])
                intent = normalize_field(row[2])
                variant_text = normalize_field(row[3])
                answer_text = normalize_field(row[4])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not group_name or not std_question or not answer_text:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_count}: –ø—É—Å—Ç–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_count += 1
                    continue
                
                try:
                    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
                    if group_name not in groups_cache:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                        groups = db.get_question_groups()
                        group_id = None
                        
                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                        for group in groups:
                            if group['name'] == group_name:
                                group_id = group['id']
                                break
                        
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                        if group_id is None:
                            group_id = db.insert_group(group_name)
                            if not group_id:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É: {group_name}")
                                skipped_count += 1
                                continue
                                
                        groups_cache[group_name] = group_id
                        inserted_groups += 1
                        logger.info(f"‚ûï –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∞: {group_name}")
                    else:
                        group_id = groups_cache[group_name]
                    
                    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    if answer_text not in answers_cache:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
                        answers = db.get_all_answers()
                        answer_id = None
                        
                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
                        for answer in answers:
                            if answer['text'] == answer_text:
                                answer_id = answer['id']
                                break
                        
                        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        if answer_id is None:
                            answer_id = db.insert_answer(answer_text)
                            if not answer_id:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç: {answer_text[:50]}...")
                                skipped_count += 1
                                continue
                                
                        answers_cache[answer_text] = answer_id
                        inserted_answers += 1
                        logger.info(f"‚ûï –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω/–¥–æ–±–∞–≤–ª–µ–Ω: {answer_text[:50]}...")
                    else:
                        answer_id = answers_cache[answer_text]
                    
                    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    cache_key = f"{group_id}_{std_question}"
                    if cache_key not in std_questions_cache:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                        questions = db.get_all_standard_questions()
                        standard_question_id = None
                        
                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                        for question in questions:
                            if (question['group_id'] == group_id and 
                                question['title'] == std_question):
                                standard_question_id = question['id']
                                break
                        
                        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        if standard_question_id is None:
                            standard_question_id = db.insert_standard_question(std_question, group_id, answer_id, intent)
                            if not standard_question_id:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {std_question}")
                                skipped_count += 1
                                continue
                                
                        std_questions_cache[cache_key] = standard_question_id
                        inserted_std_questions += 1
                        logger.info(f"‚ûï –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω/–¥–æ–±–∞–≤–ª–µ–Ω: {std_question}")
                    else:
                        standard_question_id = std_questions_cache[cache_key]
                    
                    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                    if variant_text:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
                        variant_cache_key = f"{standard_question_id}_{variant_text}"
                        if variant_cache_key in variants_cache:
                            logger.info(f"‚è© –í–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: '{variant_text}'")
                            continue
                            
                        variants_cache[variant_cache_key] = True
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥
                        normalized_text = embedder.normalize_text(variant_text)
                        embedding = embedder.get_embedding(normalized_text)
                        blob = array_to_blob(embedding)
                        
                        # –í—Å—Ç–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        try:
                            success = db.insert_question_variant(variant_text, blob, standard_question_id)
                            if success:
                                inserted_variants += 1
                                logger.info(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: '{variant_text}'")
                            else:
                                logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–¥—É–±–ª–∏–∫–∞—Ç): '{variant_text}'")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{variant_text}': {str(e)}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
                    logger.debug(traceback.format_exc())
                    skipped_count += 1
                    continue
                
        logger.info(f"\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ {csv_file}:")
        logger.info(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {row_count}")
        logger.info(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {inserted_groups}")
        logger.info(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {inserted_answers}")
        logger.info(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {inserted_std_questions}")
        logger.info(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {inserted_variants}")
        logger.info(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: {skipped_count}")
        return True
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return False

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ –ë–î')
    parser.add_argument('--file', type=str, required=True, 
                        help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
    parser.add_argument('--header', action='store_true',
                        help='–£–∫–∞–∑–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤')
    args = parser.parse_args()
    
    if load_data(args.file, args.header):
        logger.info("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É!")
    else:
        logger.error("üí• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")