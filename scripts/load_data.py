# –§–∞–π–ª load_initial_data.py
# –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CSV –≤ –ë–î

import sys
import os
import argparse
import csv
import logging
import traceback
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import Database
from embedding_model import EmbeddingModel
from utils import array_to_blob
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def is_header_row(row):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    if len(row) < 3:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–±–µ–∑ —Ü–∏—Ñ—Ä)
    contains_only_alpha = all(
        re.match(r'^[^\d]*$', field.strip(), re.IGNORECASE) 
        for field in row[:3]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–ª–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_keywords = ['intent', 'question', 'answer', '–≤–æ–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç', '–Ω–∞–º–µ—Ä–µ–Ω–∏–µ']
    contains_keywords = any(
        any(keyword in field.lower() for keyword in header_keywords)
        for field in row[:3]
    )
    
    return contains_only_alpha or contains_keywords

def load_data(csv_file, has_header=False):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    embedder = EmbeddingModel(config.MODEL_PATH)
    
    if not db.connect():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

    row_count = 0
    inserted_count = 0
    skipped_count = 0
    actual_header = None
    
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            # –°–æ–∑–¥–∞–µ–º CSV reader
            reader = csv.reader(file, delimiter=',', quotechar='"')
            
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            first_row = next(reader, None)
            if first_row is None:
                logger.error("‚ùå –§–∞–π–ª CSV –ø—É—Å—Ç")
                return False
                
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            auto_detected_header = is_header_row(first_row)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —É–∫–∞–∑–∞–ª –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if has_header or auto_detected_header:
                actual_header = first_row
                logger.info(f"üîñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {actual_header}")
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞
                file.seek(0)
                logger.info("‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏")
            
            # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
            for row in reader:
                row_count += 1
                
                if len(row) < 3:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_count += 1
                    continue
                    
                intent = row[0].strip().replace('\xa0', ' ')  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                question = row[1].strip().replace('\xa0', ' ')
                answer = row[2].strip().replace('\xa0', ' ')
                
                if not question or not answer:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_count}: –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_count += 1
                    continue
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
                    if db.question_exists(question):
                        logger.info(f"‚è© –°—Ç—Ä–æ–∫–∞ {row_count}: –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - '{question}'")
                        skipped_count += 1
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                    embedding = embedder.get_embedding(question)
                    blob = array_to_blob(embedding)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    answer_id = db.insert_answer(answer)
                    if not answer_id:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                    if not db.insert_question(question, answer_id, blob, intent):
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                    
                    inserted_count += 1
                    logger.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {row_count}: –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å - '{question}'")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
                    skipped_count += 1
                    continue
                
        logger.info(f"\nüìä –ò—Ç–æ–≥–∏ –ø–æ —Ñ–∞–π–ª—É {csv_file}:")
        logger.info(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {row_count}")
        logger.info(f"  –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {inserted_count}")
        logger.info(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        return inserted_count > 0
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return False
    finally:
        db.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ –ë–î')
    parser.add_argument('--file', type=str, required=True, 
                        help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
    parser.add_argument('--header', action='store_true',
                        help='–£–∫–∞–∑–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤')
    args = parser.parse_args()
    
    if load_data(args.file, args.header):
        logger.info("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É!")
    else:
        logger.error("üí• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")