# —Ñ–∞–π–ª scripts/add_question.py

import argparse
import logging
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import Database
from embedding_model import EmbeddingModel
from utils import array_to_blob
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def add_single_question(group_name, intent, question, answer):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    embedder = EmbeddingModel(config.MODEL_PATH)
    
    if not db.connect():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

    try:
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã
        group_id = db.get_or_create_group(group_name)
        if not group_id:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É: '{group_name}'")
            return False
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞: '{group_name}' (ID: {group_id})")

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        answer_id = db.insert_answer(answer)
        if not answer_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            return False
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID: {answer_id})")

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        std_question_id = db.insert_standard_question(
            title=question,
            group_id=group_id,
            answer_id=answer_id,
            intent=intent
        )
        if not std_question_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
            return False
        logger.info(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω (ID: {std_question_id})")

        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        normalized_text = embedder.normalize_text(question)
        embedding = embedder.get_embedding(normalized_text)
        blob = array_to_blob(embedding)
        
        if db.insert_question_variant(
            variant_text=question,
            embedding=blob,
            std_question_id=std_question_id
        ):
            logger.info(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω: '{question}'")
        else:
            logger.warning(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç): '{question}'")

        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
    finally:
        db.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--group', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã/—Ä–∞–∑–¥–µ–ª–∞')
    parser.add_argument('--intent', required=True, help='–°–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (intent)')
    parser.add_argument('--question', required=True, help='–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')
    parser.add_argument('--answer', required=True, help='–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞')
    
    args = parser.parse_args()
    
    if add_single_question(args.group, args.intent, args.question, args.answer):
        logger.info("üéâ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")