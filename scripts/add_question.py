import argparse
import logging
from database import Database
from embedding_model import EmbeddingModel
from utils import array_to_blob
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def add_single_question(intent, question, answer):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    embedder = EmbeddingModel(config.MODEL_PATH)
    
    if not db.connect():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if db.question_exists(question):
            logger.info(f"‚è© –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: '{question}'")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        embedding = embedder.get_embedding(question)
        blob = array_to_blob(embedding)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        answer_id = db.insert_answer(answer)
        if not answer_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        if not db.insert_question(question, answer_id, blob, intent):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
            return False
        
        logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: '{question}'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
    finally:
        db.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--intent', required=True, help='–ù–∞–º–µ—Ä–µ–Ω–∏–µ (intent) –≤–æ–ø—Ä–æ—Å–∞')
    parser.add_argument('--question', required=True, help='–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞')
    parser.add_argument('--answer', required=True, help='–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞')
    
    args = parser.parse_args()
    
    if add_single_question(args.intent, args.question, args.answer):
        logger.info("üéâ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")