# scripts/process_pending.py

import argparse
import logging
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import Database
import config
from add_question import add_single_question  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def process_questions(question_ids=None, all_flag=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º –∏–ª–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    db = Database(config.DB_HOST, config.DB_USER, config.DB_PASSWORD, config.DB_NAME)
    
    if not db.connect():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False

    try:
        # –í—ã–±–æ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if all_flag:
            query = "SELECT pq.id, uq.raw_question FROM pending_questions pq JOIN user_questions uq ON pq.user_question_id = uq.id WHERE pq.processed = FALSE"
        elif question_ids:
            ids_str = ",".join(map(str, question_ids))
            query = f"SELECT pq.id, uq.raw_question FROM pending_questions pq JOIN user_questions uq ON pq.user_question_id = uq.id WHERE pq.id IN ({ids_str})"
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            query = "SELECT pq.id, uq.raw_question FROM pending_questions pq JOIN user_questions uq ON pq.user_question_id = uq.id WHERE pq.processed = FALSE"
        
        with db.connection.cursor() as cursor:
            cursor.execute(query)
            questions = cursor.fetchall()
            
            if not questions:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return True

            logger.info(f"üîß –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤...")
            
            for q in questions:
                question_text = q['raw_question']
                logger.info(f"\n‚ùì –í–æ–ø—Ä–æ—Å ID {q['id']}: {question_text}")
                
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                print("1 - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
                print("2 - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")
                print("3 - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
                choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
                
                if choice == "1":
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    answer = input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: ").strip()
                    intent = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (intent): ").strip()
                    group_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
                    
                    if add_single_question(
                        group=group_name or "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                        intent=intent,
                        question=question_text,
                        answer=answer
                    ):
                        logger.info("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω")
                    else:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞")
                        continue
                elif choice == "2":
                    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    std_question_id = input("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: ").strip()
                    if not std_question_id.isdigit():
                        logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞")
                        continue
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
                    update_query = "UPDATE user_questions SET standard_question_id = %s WHERE id = (SELECT user_question_id FROM pending_questions WHERE id = %s)"
                    cursor.execute(update_query, (int(std_question_id), q['id']))
                    db.connection.commit()
                elif choice == "3":
                    logger.info("‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω")
                    continue
                else:
                    logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
                    continue
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                cursor.execute("UPDATE pending_questions SET processed = TRUE WHERE id = %s", (q['id'],))
                db.connection.commit()
                logger.info(f"üÜó –í–æ–ø—Ä–æ—Å ID {q['id']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False
    finally:
        db.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤')
    parser.add_argument('--ids', type=str, help='ID –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3)')
    parser.add_argument('--all', action='store_true', help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
    args = parser.parse_args()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID
    question_ids = None
    if args.ids:
        try:
            question_ids = list(map(int, args.ids.split(',')))
        except ValueError:
            logger.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1,2,3)")
            sys.exit(1)
    
    success = process_questions(
        question_ids=question_ids,
        all_flag=args.all
    )
    
    if not success:
        logger.error("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    logger.info("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")